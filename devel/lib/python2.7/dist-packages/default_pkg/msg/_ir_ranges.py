# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from default_pkg/ir_ranges.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ir_ranges(genpy.Message):
  _md5sum = "7dbdcf64d1ec9ac6dd04fe79926d8e6c"
  _type = "default_pkg/ir_ranges"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ir_ranges
#  Values detected by the 16 infrared Sensors
# -1 = invalid or sensor offline
int16 range_si0
int16 range_si1
int16 range_si2
int16 range_si3
int16 range_si4
int16 range_si5
int16 range_si6
int16 range_si7
int16 range_si8
int16 range_si9
int16 range_si10
int16 range_si11
int16 range_si12
int16 range_si13
int16 range_si14
int16 range_si15"""
  __slots__ = ['range_si0','range_si1','range_si2','range_si3','range_si4','range_si5','range_si6','range_si7','range_si8','range_si9','range_si10','range_si11','range_si12','range_si13','range_si14','range_si15']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       range_si0,range_si1,range_si2,range_si3,range_si4,range_si5,range_si6,range_si7,range_si8,range_si9,range_si10,range_si11,range_si12,range_si13,range_si14,range_si15

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ir_ranges, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.range_si0 is None:
        self.range_si0 = 0
      if self.range_si1 is None:
        self.range_si1 = 0
      if self.range_si2 is None:
        self.range_si2 = 0
      if self.range_si3 is None:
        self.range_si3 = 0
      if self.range_si4 is None:
        self.range_si4 = 0
      if self.range_si5 is None:
        self.range_si5 = 0
      if self.range_si6 is None:
        self.range_si6 = 0
      if self.range_si7 is None:
        self.range_si7 = 0
      if self.range_si8 is None:
        self.range_si8 = 0
      if self.range_si9 is None:
        self.range_si9 = 0
      if self.range_si10 is None:
        self.range_si10 = 0
      if self.range_si11 is None:
        self.range_si11 = 0
      if self.range_si12 is None:
        self.range_si12 = 0
      if self.range_si13 is None:
        self.range_si13 = 0
      if self.range_si14 is None:
        self.range_si14 = 0
      if self.range_si15 is None:
        self.range_si15 = 0
    else:
      self.range_si0 = 0
      self.range_si1 = 0
      self.range_si2 = 0
      self.range_si3 = 0
      self.range_si4 = 0
      self.range_si5 = 0
      self.range_si6 = 0
      self.range_si7 = 0
      self.range_si8 = 0
      self.range_si9 = 0
      self.range_si10 = 0
      self.range_si11 = 0
      self.range_si12 = 0
      self.range_si13 = 0
      self.range_si14 = 0
      self.range_si15 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16h().pack(_x.range_si0, _x.range_si1, _x.range_si2, _x.range_si3, _x.range_si4, _x.range_si5, _x.range_si6, _x.range_si7, _x.range_si8, _x.range_si9, _x.range_si10, _x.range_si11, _x.range_si12, _x.range_si13, _x.range_si14, _x.range_si15))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.range_si0, _x.range_si1, _x.range_si2, _x.range_si3, _x.range_si4, _x.range_si5, _x.range_si6, _x.range_si7, _x.range_si8, _x.range_si9, _x.range_si10, _x.range_si11, _x.range_si12, _x.range_si13, _x.range_si14, _x.range_si15,) = _get_struct_16h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16h().pack(_x.range_si0, _x.range_si1, _x.range_si2, _x.range_si3, _x.range_si4, _x.range_si5, _x.range_si6, _x.range_si7, _x.range_si8, _x.range_si9, _x.range_si10, _x.range_si11, _x.range_si12, _x.range_si13, _x.range_si14, _x.range_si15))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.range_si0, _x.range_si1, _x.range_si2, _x.range_si3, _x.range_si4, _x.range_si5, _x.range_si6, _x.range_si7, _x.range_si8, _x.range_si9, _x.range_si10, _x.range_si11, _x.range_si12, _x.range_si13, _x.range_si14, _x.range_si15,) = _get_struct_16h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16h = None
def _get_struct_16h():
    global _struct_16h
    if _struct_16h is None:
        _struct_16h = struct.Struct("<16h")
    return _struct_16h
