# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from default_pkg/move_vector.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class move_vector(genpy.Message):
  _md5sum = "246cc4b029915cb120f7b3f5cc0f4db0"
  _type = "default_pkg/move_vector"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# move_vector.msg
# move_speed = movement-vector forwards and backwards:
#     0 = none ; neg. = backwards ; pos. = forwards
# move_side = movement-vector left and right:
#     0 = none ; neg. = left ; pos. = right
# move_rot = movement-vector rotation:
#     0 = none ; neg. = counter-clockwise ; pos. = clockwise
float32 move_speed
float32 move_side
float32 move_rot
"""
  __slots__ = ['move_speed','move_side','move_rot']
  _slot_types = ['float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       move_speed,move_side,move_rot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(move_vector, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.move_speed is None:
        self.move_speed = 0.
      if self.move_side is None:
        self.move_side = 0.
      if self.move_rot is None:
        self.move_rot = 0.
    else:
      self.move_speed = 0.
      self.move_side = 0.
      self.move_rot = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.move_speed, _x.move_side, _x.move_rot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.move_speed, _x.move_side, _x.move_rot,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.move_speed, _x.move_side, _x.move_rot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.move_speed, _x.move_side, _x.move_rot,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
