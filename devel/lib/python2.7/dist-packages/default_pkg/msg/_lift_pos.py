# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from default_pkg/lift_pos.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lift_pos(genpy.Message):
  _md5sum = "53f95b57aff9495a4b38fc37e4b8ad5a"
  _type = "default_pkg/lift_pos"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# lift_pos.msg
# estimated position of the 8 lifts
# 0 = top ; -1 = bottom (balanced)
# positive value = estimeated position
int16 lift_pos0
int16 lift_pos1
int16 lift_pos2
int16 lift_pos3
int16 lift_pos4
int16 lift_pos5
int16 lift_pos6
int16 lift_pos7"""
  __slots__ = ['lift_pos0','lift_pos1','lift_pos2','lift_pos3','lift_pos4','lift_pos5','lift_pos6','lift_pos7']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lift_pos0,lift_pos1,lift_pos2,lift_pos3,lift_pos4,lift_pos5,lift_pos6,lift_pos7

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lift_pos, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lift_pos0 is None:
        self.lift_pos0 = 0
      if self.lift_pos1 is None:
        self.lift_pos1 = 0
      if self.lift_pos2 is None:
        self.lift_pos2 = 0
      if self.lift_pos3 is None:
        self.lift_pos3 = 0
      if self.lift_pos4 is None:
        self.lift_pos4 = 0
      if self.lift_pos5 is None:
        self.lift_pos5 = 0
      if self.lift_pos6 is None:
        self.lift_pos6 = 0
      if self.lift_pos7 is None:
        self.lift_pos7 = 0
    else:
      self.lift_pos0 = 0
      self.lift_pos1 = 0
      self.lift_pos2 = 0
      self.lift_pos3 = 0
      self.lift_pos4 = 0
      self.lift_pos5 = 0
      self.lift_pos6 = 0
      self.lift_pos7 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8h().pack(_x.lift_pos0, _x.lift_pos1, _x.lift_pos2, _x.lift_pos3, _x.lift_pos4, _x.lift_pos5, _x.lift_pos6, _x.lift_pos7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.lift_pos0, _x.lift_pos1, _x.lift_pos2, _x.lift_pos3, _x.lift_pos4, _x.lift_pos5, _x.lift_pos6, _x.lift_pos7,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8h().pack(_x.lift_pos0, _x.lift_pos1, _x.lift_pos2, _x.lift_pos3, _x.lift_pos4, _x.lift_pos5, _x.lift_pos6, _x.lift_pos7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.lift_pos0, _x.lift_pos1, _x.lift_pos2, _x.lift_pos3, _x.lift_pos4, _x.lift_pos5, _x.lift_pos6, _x.lift_pos7,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8h = None
def _get_struct_8h():
    global _struct_8h
    if _struct_8h is None:
        _struct_8h = struct.Struct("<8h")
    return _struct_8h
