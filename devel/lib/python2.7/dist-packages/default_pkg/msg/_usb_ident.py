# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from default_pkg/usb_ident.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class usb_ident(genpy.Message):
  _md5sum = "7d1facd4c7ec19aa6f45e3253a7c9524"
  _type = "default_pkg/usb_ident"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# usb_ident.msg
# information of all via USB attached Devices
int8 usb_ident0
string usb_loc0
int8 usb_ident1
string usb_loc1
int8 usb_ident2
string usb_loc2
int8 usb_ident3
string usb_loc3
int8 usb_ident4
string usb_loc4
int8 usb_ident5
string usb_loc5
int8 usb_ident6
string usb_loc6
int8 usb_ident7
string usb_loc7
int8 usb_ident8
string usb_loc8
int8 usb_ident9
string usb_loc9"""
  __slots__ = ['usb_ident0','usb_loc0','usb_ident1','usb_loc1','usb_ident2','usb_loc2','usb_ident3','usb_loc3','usb_ident4','usb_loc4','usb_ident5','usb_loc5','usb_ident6','usb_loc6','usb_ident7','usb_loc7','usb_ident8','usb_loc8','usb_ident9','usb_loc9']
  _slot_types = ['int8','string','int8','string','int8','string','int8','string','int8','string','int8','string','int8','string','int8','string','int8','string','int8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       usb_ident0,usb_loc0,usb_ident1,usb_loc1,usb_ident2,usb_loc2,usb_ident3,usb_loc3,usb_ident4,usb_loc4,usb_ident5,usb_loc5,usb_ident6,usb_loc6,usb_ident7,usb_loc7,usb_ident8,usb_loc8,usb_ident9,usb_loc9

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(usb_ident, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.usb_ident0 is None:
        self.usb_ident0 = 0
      if self.usb_loc0 is None:
        self.usb_loc0 = ''
      if self.usb_ident1 is None:
        self.usb_ident1 = 0
      if self.usb_loc1 is None:
        self.usb_loc1 = ''
      if self.usb_ident2 is None:
        self.usb_ident2 = 0
      if self.usb_loc2 is None:
        self.usb_loc2 = ''
      if self.usb_ident3 is None:
        self.usb_ident3 = 0
      if self.usb_loc3 is None:
        self.usb_loc3 = ''
      if self.usb_ident4 is None:
        self.usb_ident4 = 0
      if self.usb_loc4 is None:
        self.usb_loc4 = ''
      if self.usb_ident5 is None:
        self.usb_ident5 = 0
      if self.usb_loc5 is None:
        self.usb_loc5 = ''
      if self.usb_ident6 is None:
        self.usb_ident6 = 0
      if self.usb_loc6 is None:
        self.usb_loc6 = ''
      if self.usb_ident7 is None:
        self.usb_ident7 = 0
      if self.usb_loc7 is None:
        self.usb_loc7 = ''
      if self.usb_ident8 is None:
        self.usb_ident8 = 0
      if self.usb_loc8 is None:
        self.usb_loc8 = ''
      if self.usb_ident9 is None:
        self.usb_ident9 = 0
      if self.usb_loc9 is None:
        self.usb_loc9 = ''
    else:
      self.usb_ident0 = 0
      self.usb_loc0 = ''
      self.usb_ident1 = 0
      self.usb_loc1 = ''
      self.usb_ident2 = 0
      self.usb_loc2 = ''
      self.usb_ident3 = 0
      self.usb_loc3 = ''
      self.usb_ident4 = 0
      self.usb_loc4 = ''
      self.usb_ident5 = 0
      self.usb_loc5 = ''
      self.usb_ident6 = 0
      self.usb_loc6 = ''
      self.usb_ident7 = 0
      self.usb_loc7 = ''
      self.usb_ident8 = 0
      self.usb_loc8 = ''
      self.usb_ident9 = 0
      self.usb_loc9 = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_b().pack(self.usb_ident0))
      _x = self.usb_loc0
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident1))
      _x = self.usb_loc1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident2))
      _x = self.usb_loc2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident3))
      _x = self.usb_loc3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident4))
      _x = self.usb_loc4
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident5))
      _x = self.usb_loc5
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident6))
      _x = self.usb_loc6
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident7))
      _x = self.usb_loc7
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident8))
      _x = self.usb_loc8
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident9))
      _x = self.usb_loc9
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.usb_ident0,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc0 = str[start:end].decode('utf-8')
      else:
        self.usb_loc0 = str[start:end]
      start = end
      end += 1
      (self.usb_ident1,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc1 = str[start:end].decode('utf-8')
      else:
        self.usb_loc1 = str[start:end]
      start = end
      end += 1
      (self.usb_ident2,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc2 = str[start:end].decode('utf-8')
      else:
        self.usb_loc2 = str[start:end]
      start = end
      end += 1
      (self.usb_ident3,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc3 = str[start:end].decode('utf-8')
      else:
        self.usb_loc3 = str[start:end]
      start = end
      end += 1
      (self.usb_ident4,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc4 = str[start:end].decode('utf-8')
      else:
        self.usb_loc4 = str[start:end]
      start = end
      end += 1
      (self.usb_ident5,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc5 = str[start:end].decode('utf-8')
      else:
        self.usb_loc5 = str[start:end]
      start = end
      end += 1
      (self.usb_ident6,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc6 = str[start:end].decode('utf-8')
      else:
        self.usb_loc6 = str[start:end]
      start = end
      end += 1
      (self.usb_ident7,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc7 = str[start:end].decode('utf-8')
      else:
        self.usb_loc7 = str[start:end]
      start = end
      end += 1
      (self.usb_ident8,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc8 = str[start:end].decode('utf-8')
      else:
        self.usb_loc8 = str[start:end]
      start = end
      end += 1
      (self.usb_ident9,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc9 = str[start:end].decode('utf-8')
      else:
        self.usb_loc9 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_b().pack(self.usb_ident0))
      _x = self.usb_loc0
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident1))
      _x = self.usb_loc1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident2))
      _x = self.usb_loc2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident3))
      _x = self.usb_loc3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident4))
      _x = self.usb_loc4
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident5))
      _x = self.usb_loc5
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident6))
      _x = self.usb_loc6
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident7))
      _x = self.usb_loc7
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident8))
      _x = self.usb_loc8
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_b().pack(self.usb_ident9))
      _x = self.usb_loc9
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.usb_ident0,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc0 = str[start:end].decode('utf-8')
      else:
        self.usb_loc0 = str[start:end]
      start = end
      end += 1
      (self.usb_ident1,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc1 = str[start:end].decode('utf-8')
      else:
        self.usb_loc1 = str[start:end]
      start = end
      end += 1
      (self.usb_ident2,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc2 = str[start:end].decode('utf-8')
      else:
        self.usb_loc2 = str[start:end]
      start = end
      end += 1
      (self.usb_ident3,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc3 = str[start:end].decode('utf-8')
      else:
        self.usb_loc3 = str[start:end]
      start = end
      end += 1
      (self.usb_ident4,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc4 = str[start:end].decode('utf-8')
      else:
        self.usb_loc4 = str[start:end]
      start = end
      end += 1
      (self.usb_ident5,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc5 = str[start:end].decode('utf-8')
      else:
        self.usb_loc5 = str[start:end]
      start = end
      end += 1
      (self.usb_ident6,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc6 = str[start:end].decode('utf-8')
      else:
        self.usb_loc6 = str[start:end]
      start = end
      end += 1
      (self.usb_ident7,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc7 = str[start:end].decode('utf-8')
      else:
        self.usb_loc7 = str[start:end]
      start = end
      end += 1
      (self.usb_ident8,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc8 = str[start:end].decode('utf-8')
      else:
        self.usb_loc8 = str[start:end]
      start = end
      end += 1
      (self.usb_ident9,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.usb_loc9 = str[start:end].decode('utf-8')
      else:
        self.usb_loc9 = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
