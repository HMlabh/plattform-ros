# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from default_pkg/lift_endstops.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lift_endstops(genpy.Message):
  _md5sum = "930e42309aa3f8c5743576e13be17207"
  _type = "default_pkg/lift_endstops"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# lift_endstops
# Status of the 8 Endstops at the top of the lifts
# 0 = lift is up ; 1 = lift is not up
int8 lift_end0
int8 lift_end1
int8 lift_end2
int8 lift_end3
int8 lift_end4
int8 lift_end5
int8 lift_end6
int8 lift_end7"""
  __slots__ = ['lift_end0','lift_end1','lift_end2','lift_end3','lift_end4','lift_end5','lift_end6','lift_end7']
  _slot_types = ['int8','int8','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lift_end0,lift_end1,lift_end2,lift_end3,lift_end4,lift_end5,lift_end6,lift_end7

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lift_endstops, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.lift_end0 is None:
        self.lift_end0 = 0
      if self.lift_end1 is None:
        self.lift_end1 = 0
      if self.lift_end2 is None:
        self.lift_end2 = 0
      if self.lift_end3 is None:
        self.lift_end3 = 0
      if self.lift_end4 is None:
        self.lift_end4 = 0
      if self.lift_end5 is None:
        self.lift_end5 = 0
      if self.lift_end6 is None:
        self.lift_end6 = 0
      if self.lift_end7 is None:
        self.lift_end7 = 0
    else:
      self.lift_end0 = 0
      self.lift_end1 = 0
      self.lift_end2 = 0
      self.lift_end3 = 0
      self.lift_end4 = 0
      self.lift_end5 = 0
      self.lift_end6 = 0
      self.lift_end7 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8b().pack(_x.lift_end0, _x.lift_end1, _x.lift_end2, _x.lift_end3, _x.lift_end4, _x.lift_end5, _x.lift_end6, _x.lift_end7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.lift_end0, _x.lift_end1, _x.lift_end2, _x.lift_end3, _x.lift_end4, _x.lift_end5, _x.lift_end6, _x.lift_end7,) = _get_struct_8b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8b().pack(_x.lift_end0, _x.lift_end1, _x.lift_end2, _x.lift_end3, _x.lift_end4, _x.lift_end5, _x.lift_end6, _x.lift_end7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.lift_end0, _x.lift_end1, _x.lift_end2, _x.lift_end3, _x.lift_end4, _x.lift_end5, _x.lift_end6, _x.lift_end7,) = _get_struct_8b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8b = None
def _get_struct_8b():
    global _struct_8b
    if _struct_8b is None:
        _struct_8b = struct.Struct("<8b")
    return _struct_8b
