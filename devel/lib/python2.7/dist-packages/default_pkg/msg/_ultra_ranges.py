# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from default_pkg/ultra_ranges.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ultra_ranges(genpy.Message):
  _md5sum = "93163f93503d91c254cfa8fc0452488a"
  _type = "default_pkg/ultra_ranges"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ultra_ranges
# Ranges in cm of the 10 ultrasonic distance sensors
float32 range_su0
float32 range_su1
float32 range_su2
float32 range_su3
float32 range_su4
float32 range_su5
float32 range_su6
float32 range_su7
float32 range_su8
float32 range_su9"""
  __slots__ = ['range_su0','range_su1','range_su2','range_su3','range_su4','range_su5','range_su6','range_su7','range_su8','range_su9']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       range_su0,range_su1,range_su2,range_su3,range_su4,range_su5,range_su6,range_su7,range_su8,range_su9

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ultra_ranges, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.range_su0 is None:
        self.range_su0 = 0.
      if self.range_su1 is None:
        self.range_su1 = 0.
      if self.range_su2 is None:
        self.range_su2 = 0.
      if self.range_su3 is None:
        self.range_su3 = 0.
      if self.range_su4 is None:
        self.range_su4 = 0.
      if self.range_su5 is None:
        self.range_su5 = 0.
      if self.range_su6 is None:
        self.range_su6 = 0.
      if self.range_su7 is None:
        self.range_su7 = 0.
      if self.range_su8 is None:
        self.range_su8 = 0.
      if self.range_su9 is None:
        self.range_su9 = 0.
    else:
      self.range_su0 = 0.
      self.range_su1 = 0.
      self.range_su2 = 0.
      self.range_su3 = 0.
      self.range_su4 = 0.
      self.range_su5 = 0.
      self.range_su6 = 0.
      self.range_su7 = 0.
      self.range_su8 = 0.
      self.range_su9 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10f().pack(_x.range_su0, _x.range_su1, _x.range_su2, _x.range_su3, _x.range_su4, _x.range_su5, _x.range_su6, _x.range_su7, _x.range_su8, _x.range_su9))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.range_su0, _x.range_su1, _x.range_su2, _x.range_su3, _x.range_su4, _x.range_su5, _x.range_su6, _x.range_su7, _x.range_su8, _x.range_su9,) = _get_struct_10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10f().pack(_x.range_su0, _x.range_su1, _x.range_su2, _x.range_su3, _x.range_su4, _x.range_su5, _x.range_su6, _x.range_su7, _x.range_su8, _x.range_su9))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.range_su0, _x.range_su1, _x.range_su2, _x.range_su3, _x.range_su4, _x.range_su5, _x.range_su6, _x.range_su7, _x.range_su8, _x.range_su9,) = _get_struct_10f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10f = None
def _get_struct_10f():
    global _struct_10f
    if _struct_10f is None:
        _struct_10f = struct.Struct("<10f")
    return _struct_10f
