# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from default_pkg/mechano_speeds.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mechano_speeds(genpy.Message):
  _md5sum = "32bb77eb7cf1adff580206872abd102c"
  _type = "default_pkg/mechano_speeds"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# mechano_speeds.msg
# PWM-value for the 8 dc-Motors
# 0 = STOP ; -255 to 0 = backwards ; 0 to 255 = forwards
int16 mech_speed0
int16 mech_speed1
int16 mech_speed2
int16 mech_speed3
int16 mech_speed4
int16 mech_speed5
int16 mech_speed6
int16 mech_speed7
"""
  __slots__ = ['mech_speed0','mech_speed1','mech_speed2','mech_speed3','mech_speed4','mech_speed5','mech_speed6','mech_speed7']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mech_speed0,mech_speed1,mech_speed2,mech_speed3,mech_speed4,mech_speed5,mech_speed6,mech_speed7

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mechano_speeds, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.mech_speed0 is None:
        self.mech_speed0 = 0
      if self.mech_speed1 is None:
        self.mech_speed1 = 0
      if self.mech_speed2 is None:
        self.mech_speed2 = 0
      if self.mech_speed3 is None:
        self.mech_speed3 = 0
      if self.mech_speed4 is None:
        self.mech_speed4 = 0
      if self.mech_speed5 is None:
        self.mech_speed5 = 0
      if self.mech_speed6 is None:
        self.mech_speed6 = 0
      if self.mech_speed7 is None:
        self.mech_speed7 = 0
    else:
      self.mech_speed0 = 0
      self.mech_speed1 = 0
      self.mech_speed2 = 0
      self.mech_speed3 = 0
      self.mech_speed4 = 0
      self.mech_speed5 = 0
      self.mech_speed6 = 0
      self.mech_speed7 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8h().pack(_x.mech_speed0, _x.mech_speed1, _x.mech_speed2, _x.mech_speed3, _x.mech_speed4, _x.mech_speed5, _x.mech_speed6, _x.mech_speed7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.mech_speed0, _x.mech_speed1, _x.mech_speed2, _x.mech_speed3, _x.mech_speed4, _x.mech_speed5, _x.mech_speed6, _x.mech_speed7,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8h().pack(_x.mech_speed0, _x.mech_speed1, _x.mech_speed2, _x.mech_speed3, _x.mech_speed4, _x.mech_speed5, _x.mech_speed6, _x.mech_speed7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.mech_speed0, _x.mech_speed1, _x.mech_speed2, _x.mech_speed3, _x.mech_speed4, _x.mech_speed5, _x.mech_speed6, _x.mech_speed7,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8h = None
def _get_struct_8h():
    global _struct_8h
    if _struct_8h is None:
        _struct_8h = struct.Struct("<8h")
    return _struct_8h
