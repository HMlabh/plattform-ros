# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from default_pkg/lift_pressure.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lift_pressure(genpy.Message):
  _md5sum = "a8db6d3508127a0e3968bf2cc3e4314f"
  _type = "default_pkg/lift_pressure"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# lift_pressure
# Pressure measured by the 8 Load-Cells
int16 pressure_load0
int16 pressure_load1
int16 pressure_load2
int16 pressure_load3
int16 pressure_load4
int16 pressure_load5
int16 pressure_load6
int16 pressure_load7"""
  __slots__ = ['pressure_load0','pressure_load1','pressure_load2','pressure_load3','pressure_load4','pressure_load5','pressure_load6','pressure_load7']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pressure_load0,pressure_load1,pressure_load2,pressure_load3,pressure_load4,pressure_load5,pressure_load6,pressure_load7

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lift_pressure, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pressure_load0 is None:
        self.pressure_load0 = 0
      if self.pressure_load1 is None:
        self.pressure_load1 = 0
      if self.pressure_load2 is None:
        self.pressure_load2 = 0
      if self.pressure_load3 is None:
        self.pressure_load3 = 0
      if self.pressure_load4 is None:
        self.pressure_load4 = 0
      if self.pressure_load5 is None:
        self.pressure_load5 = 0
      if self.pressure_load6 is None:
        self.pressure_load6 = 0
      if self.pressure_load7 is None:
        self.pressure_load7 = 0
    else:
      self.pressure_load0 = 0
      self.pressure_load1 = 0
      self.pressure_load2 = 0
      self.pressure_load3 = 0
      self.pressure_load4 = 0
      self.pressure_load5 = 0
      self.pressure_load6 = 0
      self.pressure_load7 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8h().pack(_x.pressure_load0, _x.pressure_load1, _x.pressure_load2, _x.pressure_load3, _x.pressure_load4, _x.pressure_load5, _x.pressure_load6, _x.pressure_load7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.pressure_load0, _x.pressure_load1, _x.pressure_load2, _x.pressure_load3, _x.pressure_load4, _x.pressure_load5, _x.pressure_load6, _x.pressure_load7,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8h().pack(_x.pressure_load0, _x.pressure_load1, _x.pressure_load2, _x.pressure_load3, _x.pressure_load4, _x.pressure_load5, _x.pressure_load6, _x.pressure_load7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.pressure_load0, _x.pressure_load1, _x.pressure_load2, _x.pressure_load3, _x.pressure_load4, _x.pressure_load5, _x.pressure_load6, _x.pressure_load7,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8h = None
def _get_struct_8h():
    global _struct_8h
    if _struct_8h is None:
        _struct_8h = struct.Struct("<8h")
    return _struct_8h
