// Generated by gencpp from file default_pkg/move_vector.msg
// DO NOT EDIT!


#ifndef DEFAULT_PKG_MESSAGE_MOVE_VECTOR_H
#define DEFAULT_PKG_MESSAGE_MOVE_VECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace default_pkg
{
template <class ContainerAllocator>
struct move_vector_
{
  typedef move_vector_<ContainerAllocator> Type;

  move_vector_()
    : move_speed(0.0)
    , move_side(0.0)
    , move_rot(0.0)  {
    }
  move_vector_(const ContainerAllocator& _alloc)
    : move_speed(0.0)
    , move_side(0.0)
    , move_rot(0.0)  {
  (void)_alloc;
    }



   typedef float _move_speed_type;
  _move_speed_type move_speed;

   typedef float _move_side_type;
  _move_side_type move_side;

   typedef float _move_rot_type;
  _move_rot_type move_rot;




  typedef boost::shared_ptr< ::default_pkg::move_vector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::default_pkg::move_vector_<ContainerAllocator> const> ConstPtr;

}; // struct move_vector_

typedef ::default_pkg::move_vector_<std::allocator<void> > move_vector;

typedef boost::shared_ptr< ::default_pkg::move_vector > move_vectorPtr;
typedef boost::shared_ptr< ::default_pkg::move_vector const> move_vectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::default_pkg::move_vector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::default_pkg::move_vector_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace default_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'default_pkg': ['/home/labh/plattform-ros/src/default_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::move_vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::move_vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::move_vector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::move_vector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::move_vector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::move_vector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::default_pkg::move_vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "246cc4b029915cb120f7b3f5cc0f4db0";
  }

  static const char* value(const ::default_pkg::move_vector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x246cc4b029915cb1ULL;
  static const uint64_t static_value2 = 0x20f7b3f5cc0f4db0ULL;
};

template<class ContainerAllocator>
struct DataType< ::default_pkg::move_vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "default_pkg/move_vector";
  }

  static const char* value(const ::default_pkg::move_vector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::default_pkg::move_vector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# move_vector\n\
# move_speed = movement-vector forwards and backwards:\n\
#     0 = none ; neg. = backwards ; pos. = forwards\n\
# move_side = movement-vector left and right:\n\
#     0 = none ; neg. = left ; pos. = right\n\
# move_rot = movement-vector rotation:\n\
#     0 = none ; neg. = anti-clockwise ; pos. = clockwise\n\
float32 move_speed\n\
float32 move_side\n\
float32 move_rot\n\
";
  }

  static const char* value(const ::default_pkg::move_vector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::default_pkg::move_vector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_speed);
      stream.next(m.move_side);
      stream.next(m.move_rot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct move_vector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::default_pkg::move_vector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::default_pkg::move_vector_<ContainerAllocator>& v)
  {
    s << indent << "move_speed: ";
    Printer<float>::stream(s, indent + "  ", v.move_speed);
    s << indent << "move_side: ";
    Printer<float>::stream(s, indent + "  ", v.move_side);
    s << indent << "move_rot: ";
    Printer<float>::stream(s, indent + "  ", v.move_rot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFAULT_PKG_MESSAGE_MOVE_VECTOR_H
