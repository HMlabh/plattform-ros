// Generated by gencpp from file default_pkg/ir_ranges.msg
// DO NOT EDIT!


#ifndef DEFAULT_PKG_MESSAGE_IR_RANGES_H
#define DEFAULT_PKG_MESSAGE_IR_RANGES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace default_pkg
{
template <class ContainerAllocator>
struct ir_ranges_
{
  typedef ir_ranges_<ContainerAllocator> Type;

  ir_ranges_()
    : range_si0(0)
    , range_si1(0)
    , range_si2(0)
    , range_si3(0)
    , range_si4(0)
    , range_si5(0)
    , range_si6(0)
    , range_si7(0)
    , range_si8(0)
    , range_si9(0)
    , range_si10(0)
    , range_si11(0)
    , range_si12(0)
    , range_si13(0)
    , range_si14(0)
    , range_si15(0)  {
    }
  ir_ranges_(const ContainerAllocator& _alloc)
    : range_si0(0)
    , range_si1(0)
    , range_si2(0)
    , range_si3(0)
    , range_si4(0)
    , range_si5(0)
    , range_si6(0)
    , range_si7(0)
    , range_si8(0)
    , range_si9(0)
    , range_si10(0)
    , range_si11(0)
    , range_si12(0)
    , range_si13(0)
    , range_si14(0)
    , range_si15(0)  {
  (void)_alloc;
    }



   typedef int16_t _range_si0_type;
  _range_si0_type range_si0;

   typedef int16_t _range_si1_type;
  _range_si1_type range_si1;

   typedef int16_t _range_si2_type;
  _range_si2_type range_si2;

   typedef int16_t _range_si3_type;
  _range_si3_type range_si3;

   typedef int16_t _range_si4_type;
  _range_si4_type range_si4;

   typedef int16_t _range_si5_type;
  _range_si5_type range_si5;

   typedef int16_t _range_si6_type;
  _range_si6_type range_si6;

   typedef int16_t _range_si7_type;
  _range_si7_type range_si7;

   typedef int16_t _range_si8_type;
  _range_si8_type range_si8;

   typedef int16_t _range_si9_type;
  _range_si9_type range_si9;

   typedef int16_t _range_si10_type;
  _range_si10_type range_si10;

   typedef int16_t _range_si11_type;
  _range_si11_type range_si11;

   typedef int16_t _range_si12_type;
  _range_si12_type range_si12;

   typedef int16_t _range_si13_type;
  _range_si13_type range_si13;

   typedef int16_t _range_si14_type;
  _range_si14_type range_si14;

   typedef int16_t _range_si15_type;
  _range_si15_type range_si15;




  typedef boost::shared_ptr< ::default_pkg::ir_ranges_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::default_pkg::ir_ranges_<ContainerAllocator> const> ConstPtr;

}; // struct ir_ranges_

typedef ::default_pkg::ir_ranges_<std::allocator<void> > ir_ranges;

typedef boost::shared_ptr< ::default_pkg::ir_ranges > ir_rangesPtr;
typedef boost::shared_ptr< ::default_pkg::ir_ranges const> ir_rangesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::default_pkg::ir_ranges_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::default_pkg::ir_ranges_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace default_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'default_pkg': ['/home/labh/plattform-ros/src/default_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::ir_ranges_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::ir_ranges_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::ir_ranges_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::ir_ranges_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::ir_ranges_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::ir_ranges_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::default_pkg::ir_ranges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7dbdcf64d1ec9ac6dd04fe79926d8e6c";
  }

  static const char* value(const ::default_pkg::ir_ranges_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7dbdcf64d1ec9ac6ULL;
  static const uint64_t static_value2 = 0xdd04fe79926d8e6cULL;
};

template<class ContainerAllocator>
struct DataType< ::default_pkg::ir_ranges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "default_pkg/ir_ranges";
  }

  static const char* value(const ::default_pkg::ir_ranges_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::default_pkg::ir_ranges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ir_ranges\n\
#  Values detected by the 16 infrared Sensors\n\
# -1 = invalid or sensor offline\n\
int16 range_si0\n\
int16 range_si1\n\
int16 range_si2\n\
int16 range_si3\n\
int16 range_si4\n\
int16 range_si5\n\
int16 range_si6\n\
int16 range_si7\n\
int16 range_si8\n\
int16 range_si9\n\
int16 range_si10\n\
int16 range_si11\n\
int16 range_si12\n\
int16 range_si13\n\
int16 range_si14\n\
int16 range_si15\n\
";
  }

  static const char* value(const ::default_pkg::ir_ranges_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::default_pkg::ir_ranges_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.range_si0);
      stream.next(m.range_si1);
      stream.next(m.range_si2);
      stream.next(m.range_si3);
      stream.next(m.range_si4);
      stream.next(m.range_si5);
      stream.next(m.range_si6);
      stream.next(m.range_si7);
      stream.next(m.range_si8);
      stream.next(m.range_si9);
      stream.next(m.range_si10);
      stream.next(m.range_si11);
      stream.next(m.range_si12);
      stream.next(m.range_si13);
      stream.next(m.range_si14);
      stream.next(m.range_si15);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ir_ranges_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::default_pkg::ir_ranges_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::default_pkg::ir_ranges_<ContainerAllocator>& v)
  {
    s << indent << "range_si0: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si0);
    s << indent << "range_si1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si1);
    s << indent << "range_si2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si2);
    s << indent << "range_si3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si3);
    s << indent << "range_si4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si4);
    s << indent << "range_si5: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si5);
    s << indent << "range_si6: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si6);
    s << indent << "range_si7: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si7);
    s << indent << "range_si8: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si8);
    s << indent << "range_si9: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si9);
    s << indent << "range_si10: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si10);
    s << indent << "range_si11: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si11);
    s << indent << "range_si12: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si12);
    s << indent << "range_si13: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si13);
    s << indent << "range_si14: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si14);
    s << indent << "range_si15: ";
    Printer<int16_t>::stream(s, indent + "  ", v.range_si15);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFAULT_PKG_MESSAGE_IR_RANGES_H
