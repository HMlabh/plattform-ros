// Generated by gencpp from file default_pkg/usb_ident.msg
// DO NOT EDIT!


#ifndef DEFAULT_PKG_MESSAGE_USB_IDENT_H
#define DEFAULT_PKG_MESSAGE_USB_IDENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace default_pkg
{
template <class ContainerAllocator>
struct usb_ident_
{
  typedef usb_ident_<ContainerAllocator> Type;

  usb_ident_()
    : usb_ident0(0)
    , usb_loc0()
    , usb_ident1(0)
    , usb_loc1()
    , usb_ident2(0)
    , usb_loc2()
    , usb_ident3(0)
    , usb_loc3()
    , usb_ident4(0)
    , usb_loc4()
    , usb_ident5(0)
    , usb_loc5()
    , usb_ident6(0)
    , usb_loc6()
    , usb_ident7(0)
    , usb_loc7()
    , usb_ident8(0)
    , usb_loc8()
    , usb_ident9(0)
    , usb_loc9()  {
    }
  usb_ident_(const ContainerAllocator& _alloc)
    : usb_ident0(0)
    , usb_loc0(_alloc)
    , usb_ident1(0)
    , usb_loc1(_alloc)
    , usb_ident2(0)
    , usb_loc2(_alloc)
    , usb_ident3(0)
    , usb_loc3(_alloc)
    , usb_ident4(0)
    , usb_loc4(_alloc)
    , usb_ident5(0)
    , usb_loc5(_alloc)
    , usb_ident6(0)
    , usb_loc6(_alloc)
    , usb_ident7(0)
    , usb_loc7(_alloc)
    , usb_ident8(0)
    , usb_loc8(_alloc)
    , usb_ident9(0)
    , usb_loc9(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _usb_ident0_type;
  _usb_ident0_type usb_ident0;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc0_type;
  _usb_loc0_type usb_loc0;

   typedef int8_t _usb_ident1_type;
  _usb_ident1_type usb_ident1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc1_type;
  _usb_loc1_type usb_loc1;

   typedef int8_t _usb_ident2_type;
  _usb_ident2_type usb_ident2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc2_type;
  _usb_loc2_type usb_loc2;

   typedef int8_t _usb_ident3_type;
  _usb_ident3_type usb_ident3;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc3_type;
  _usb_loc3_type usb_loc3;

   typedef int8_t _usb_ident4_type;
  _usb_ident4_type usb_ident4;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc4_type;
  _usb_loc4_type usb_loc4;

   typedef int8_t _usb_ident5_type;
  _usb_ident5_type usb_ident5;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc5_type;
  _usb_loc5_type usb_loc5;

   typedef int8_t _usb_ident6_type;
  _usb_ident6_type usb_ident6;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc6_type;
  _usb_loc6_type usb_loc6;

   typedef int8_t _usb_ident7_type;
  _usb_ident7_type usb_ident7;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc7_type;
  _usb_loc7_type usb_loc7;

   typedef int8_t _usb_ident8_type;
  _usb_ident8_type usb_ident8;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc8_type;
  _usb_loc8_type usb_loc8;

   typedef int8_t _usb_ident9_type;
  _usb_ident9_type usb_ident9;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _usb_loc9_type;
  _usb_loc9_type usb_loc9;




  typedef boost::shared_ptr< ::default_pkg::usb_ident_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::default_pkg::usb_ident_<ContainerAllocator> const> ConstPtr;

}; // struct usb_ident_

typedef ::default_pkg::usb_ident_<std::allocator<void> > usb_ident;

typedef boost::shared_ptr< ::default_pkg::usb_ident > usb_identPtr;
typedef boost::shared_ptr< ::default_pkg::usb_ident const> usb_identConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::default_pkg::usb_ident_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::default_pkg::usb_ident_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace default_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'default_pkg': ['/home/labh/plattform-ros/src/default_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::usb_ident_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::usb_ident_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::usb_ident_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::usb_ident_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::usb_ident_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::usb_ident_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::default_pkg::usb_ident_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d1facd4c7ec19aa6f45e3253a7c9524";
  }

  static const char* value(const ::default_pkg::usb_ident_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d1facd4c7ec19aaULL;
  static const uint64_t static_value2 = 0x6f45e3253a7c9524ULL;
};

template<class ContainerAllocator>
struct DataType< ::default_pkg::usb_ident_<ContainerAllocator> >
{
  static const char* value()
  {
    return "default_pkg/usb_ident";
  }

  static const char* value(const ::default_pkg::usb_ident_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::default_pkg::usb_ident_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# usb_ident.msg\n\
# information of all via USB attached Devices\n\
int8 usb_ident0\n\
string usb_loc0\n\
int8 usb_ident1\n\
string usb_loc1\n\
int8 usb_ident2\n\
string usb_loc2\n\
int8 usb_ident3\n\
string usb_loc3\n\
int8 usb_ident4\n\
string usb_loc4\n\
int8 usb_ident5\n\
string usb_loc5\n\
int8 usb_ident6\n\
string usb_loc6\n\
int8 usb_ident7\n\
string usb_loc7\n\
int8 usb_ident8\n\
string usb_loc8\n\
int8 usb_ident9\n\
string usb_loc9\n\
";
  }

  static const char* value(const ::default_pkg::usb_ident_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::default_pkg::usb_ident_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.usb_ident0);
      stream.next(m.usb_loc0);
      stream.next(m.usb_ident1);
      stream.next(m.usb_loc1);
      stream.next(m.usb_ident2);
      stream.next(m.usb_loc2);
      stream.next(m.usb_ident3);
      stream.next(m.usb_loc3);
      stream.next(m.usb_ident4);
      stream.next(m.usb_loc4);
      stream.next(m.usb_ident5);
      stream.next(m.usb_loc5);
      stream.next(m.usb_ident6);
      stream.next(m.usb_loc6);
      stream.next(m.usb_ident7);
      stream.next(m.usb_loc7);
      stream.next(m.usb_ident8);
      stream.next(m.usb_loc8);
      stream.next(m.usb_ident9);
      stream.next(m.usb_loc9);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct usb_ident_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::default_pkg::usb_ident_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::default_pkg::usb_ident_<ContainerAllocator>& v)
  {
    s << indent << "usb_ident0: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident0);
    s << indent << "usb_loc0: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc0);
    s << indent << "usb_ident1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident1);
    s << indent << "usb_loc1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc1);
    s << indent << "usb_ident2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident2);
    s << indent << "usb_loc2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc2);
    s << indent << "usb_ident3: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident3);
    s << indent << "usb_loc3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc3);
    s << indent << "usb_ident4: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident4);
    s << indent << "usb_loc4: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc4);
    s << indent << "usb_ident5: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident5);
    s << indent << "usb_loc5: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc5);
    s << indent << "usb_ident6: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident6);
    s << indent << "usb_loc6: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc6);
    s << indent << "usb_ident7: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident7);
    s << indent << "usb_loc7: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc7);
    s << indent << "usb_ident8: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident8);
    s << indent << "usb_loc8: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc8);
    s << indent << "usb_ident9: ";
    Printer<int8_t>::stream(s, indent + "  ", v.usb_ident9);
    s << indent << "usb_loc9: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.usb_loc9);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFAULT_PKG_MESSAGE_USB_IDENT_H
