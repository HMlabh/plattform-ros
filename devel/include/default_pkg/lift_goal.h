// Generated by gencpp from file default_pkg/lift_goal.msg
// DO NOT EDIT!


#ifndef DEFAULT_PKG_MESSAGE_LIFT_GOAL_H
#define DEFAULT_PKG_MESSAGE_LIFT_GOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace default_pkg
{
template <class ContainerAllocator>
struct lift_goal_
{
  typedef lift_goal_<ContainerAllocator> Type;

  lift_goal_()
    : lift_goal0(0)
    , lift_goal1(0)
    , lift_goal2(0)
    , lift_goal3(0)
    , lift_goal4(0)
    , lift_goal5(0)
    , lift_goal6(0)
    , lift_goal7(0)  {
    }
  lift_goal_(const ContainerAllocator& _alloc)
    : lift_goal0(0)
    , lift_goal1(0)
    , lift_goal2(0)
    , lift_goal3(0)
    , lift_goal4(0)
    , lift_goal5(0)
    , lift_goal6(0)
    , lift_goal7(0)  {
  (void)_alloc;
    }



   typedef int8_t _lift_goal0_type;
  _lift_goal0_type lift_goal0;

   typedef int8_t _lift_goal1_type;
  _lift_goal1_type lift_goal1;

   typedef int8_t _lift_goal2_type;
  _lift_goal2_type lift_goal2;

   typedef int8_t _lift_goal3_type;
  _lift_goal3_type lift_goal3;

   typedef int8_t _lift_goal4_type;
  _lift_goal4_type lift_goal4;

   typedef int8_t _lift_goal5_type;
  _lift_goal5_type lift_goal5;

   typedef int8_t _lift_goal6_type;
  _lift_goal6_type lift_goal6;

   typedef int8_t _lift_goal7_type;
  _lift_goal7_type lift_goal7;




  typedef boost::shared_ptr< ::default_pkg::lift_goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::default_pkg::lift_goal_<ContainerAllocator> const> ConstPtr;

}; // struct lift_goal_

typedef ::default_pkg::lift_goal_<std::allocator<void> > lift_goal;

typedef boost::shared_ptr< ::default_pkg::lift_goal > lift_goalPtr;
typedef boost::shared_ptr< ::default_pkg::lift_goal const> lift_goalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::default_pkg::lift_goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::default_pkg::lift_goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace default_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'default_pkg': ['/home/labh/plattform-ros/src/default_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::lift_goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::lift_goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::lift_goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::lift_goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::lift_goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::lift_goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::default_pkg::lift_goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14995ce8af4d2f12e7ff9eb6001809c7";
  }

  static const char* value(const ::default_pkg::lift_goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14995ce8af4d2f12ULL;
  static const uint64_t static_value2 = 0xe7ff9eb6001809c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::default_pkg::lift_goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "default_pkg/lift_goal";
  }

  static const char* value(const ::default_pkg::lift_goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::default_pkg::lift_goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# lift_goal.msg\n\
# defines the movement goal tof the 8 lifts\n\
# 1 = top ; -1 = bottom ; 0 = STOP;\n\
int8 lift_goal0\n\
int8 lift_goal1\n\
int8 lift_goal2\n\
int8 lift_goal3\n\
int8 lift_goal4\n\
int8 lift_goal5\n\
int8 lift_goal6\n\
int8 lift_goal7\n\
";
  }

  static const char* value(const ::default_pkg::lift_goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::default_pkg::lift_goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lift_goal0);
      stream.next(m.lift_goal1);
      stream.next(m.lift_goal2);
      stream.next(m.lift_goal3);
      stream.next(m.lift_goal4);
      stream.next(m.lift_goal5);
      stream.next(m.lift_goal6);
      stream.next(m.lift_goal7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct lift_goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::default_pkg::lift_goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::default_pkg::lift_goal_<ContainerAllocator>& v)
  {
    s << indent << "lift_goal0: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_goal0);
    s << indent << "lift_goal1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_goal1);
    s << indent << "lift_goal2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_goal2);
    s << indent << "lift_goal3: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_goal3);
    s << indent << "lift_goal4: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_goal4);
    s << indent << "lift_goal5: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_goal5);
    s << indent << "lift_goal6: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_goal6);
    s << indent << "lift_goal7: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_goal7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFAULT_PKG_MESSAGE_LIFT_GOAL_H
