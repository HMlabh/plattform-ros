// Generated by gencpp from file default_pkg/mechano_speeds.msg
// DO NOT EDIT!


#ifndef DEFAULT_PKG_MESSAGE_MECHANO_SPEEDS_H
#define DEFAULT_PKG_MESSAGE_MECHANO_SPEEDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace default_pkg
{
template <class ContainerAllocator>
struct mechano_speeds_
{
  typedef mechano_speeds_<ContainerAllocator> Type;

  mechano_speeds_()
    : mech_speed0(0)
    , mech_speed1(0)
    , mech_speed2(0)
    , mech_speed3(0)
    , mech_speed4(0)
    , mech_speed5(0)
    , mech_speed6(0)
    , mech_speed7(0)  {
    }
  mechano_speeds_(const ContainerAllocator& _alloc)
    : mech_speed0(0)
    , mech_speed1(0)
    , mech_speed2(0)
    , mech_speed3(0)
    , mech_speed4(0)
    , mech_speed5(0)
    , mech_speed6(0)
    , mech_speed7(0)  {
  (void)_alloc;
    }



   typedef int16_t _mech_speed0_type;
  _mech_speed0_type mech_speed0;

   typedef int16_t _mech_speed1_type;
  _mech_speed1_type mech_speed1;

   typedef int16_t _mech_speed2_type;
  _mech_speed2_type mech_speed2;

   typedef int16_t _mech_speed3_type;
  _mech_speed3_type mech_speed3;

   typedef int16_t _mech_speed4_type;
  _mech_speed4_type mech_speed4;

   typedef int16_t _mech_speed5_type;
  _mech_speed5_type mech_speed5;

   typedef int16_t _mech_speed6_type;
  _mech_speed6_type mech_speed6;

   typedef int16_t _mech_speed7_type;
  _mech_speed7_type mech_speed7;




  typedef boost::shared_ptr< ::default_pkg::mechano_speeds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::default_pkg::mechano_speeds_<ContainerAllocator> const> ConstPtr;

}; // struct mechano_speeds_

typedef ::default_pkg::mechano_speeds_<std::allocator<void> > mechano_speeds;

typedef boost::shared_ptr< ::default_pkg::mechano_speeds > mechano_speedsPtr;
typedef boost::shared_ptr< ::default_pkg::mechano_speeds const> mechano_speedsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::default_pkg::mechano_speeds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::default_pkg::mechano_speeds_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace default_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'default_pkg': ['/home/labh/plattform-ros/src/default_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::mechano_speeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::mechano_speeds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::mechano_speeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::mechano_speeds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::mechano_speeds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::mechano_speeds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::default_pkg::mechano_speeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32bb77eb7cf1adff580206872abd102c";
  }

  static const char* value(const ::default_pkg::mechano_speeds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32bb77eb7cf1adffULL;
  static const uint64_t static_value2 = 0x580206872abd102cULL;
};

template<class ContainerAllocator>
struct DataType< ::default_pkg::mechano_speeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "default_pkg/mechano_speeds";
  }

  static const char* value(const ::default_pkg::mechano_speeds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::default_pkg::mechano_speeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# mechano_speeds.msg\n\
# PWM-value for the 8 dc-Motors\n\
# 0 = STOP ; -255 to 0 = backwards ; 0 to 255 = forwards\n\
int16 mech_speed0\n\
int16 mech_speed1\n\
int16 mech_speed2\n\
int16 mech_speed3\n\
int16 mech_speed4\n\
int16 mech_speed5\n\
int16 mech_speed6\n\
int16 mech_speed7\n\
";
  }

  static const char* value(const ::default_pkg::mechano_speeds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::default_pkg::mechano_speeds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mech_speed0);
      stream.next(m.mech_speed1);
      stream.next(m.mech_speed2);
      stream.next(m.mech_speed3);
      stream.next(m.mech_speed4);
      stream.next(m.mech_speed5);
      stream.next(m.mech_speed6);
      stream.next(m.mech_speed7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct mechano_speeds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::default_pkg::mechano_speeds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::default_pkg::mechano_speeds_<ContainerAllocator>& v)
  {
    s << indent << "mech_speed0: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mech_speed0);
    s << indent << "mech_speed1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mech_speed1);
    s << indent << "mech_speed2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mech_speed2);
    s << indent << "mech_speed3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mech_speed3);
    s << indent << "mech_speed4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mech_speed4);
    s << indent << "mech_speed5: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mech_speed5);
    s << indent << "mech_speed6: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mech_speed6);
    s << indent << "mech_speed7: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mech_speed7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFAULT_PKG_MESSAGE_MECHANO_SPEEDS_H
