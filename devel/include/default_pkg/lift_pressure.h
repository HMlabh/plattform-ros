// Generated by gencpp from file default_pkg/lift_pressure.msg
// DO NOT EDIT!


#ifndef DEFAULT_PKG_MESSAGE_LIFT_PRESSURE_H
#define DEFAULT_PKG_MESSAGE_LIFT_PRESSURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace default_pkg
{
template <class ContainerAllocator>
struct lift_pressure_
{
  typedef lift_pressure_<ContainerAllocator> Type;

  lift_pressure_()
    : pressure_load0(0)
    , pressure_load1(0)
    , pressure_load2(0)
    , pressure_load3(0)
    , pressure_load4(0)
    , pressure_load5(0)
    , pressure_load6(0)
    , pressure_load7(0)  {
    }
  lift_pressure_(const ContainerAllocator& _alloc)
    : pressure_load0(0)
    , pressure_load1(0)
    , pressure_load2(0)
    , pressure_load3(0)
    , pressure_load4(0)
    , pressure_load5(0)
    , pressure_load6(0)
    , pressure_load7(0)  {
  (void)_alloc;
    }



   typedef int16_t _pressure_load0_type;
  _pressure_load0_type pressure_load0;

   typedef int16_t _pressure_load1_type;
  _pressure_load1_type pressure_load1;

   typedef int16_t _pressure_load2_type;
  _pressure_load2_type pressure_load2;

   typedef int16_t _pressure_load3_type;
  _pressure_load3_type pressure_load3;

   typedef int16_t _pressure_load4_type;
  _pressure_load4_type pressure_load4;

   typedef int16_t _pressure_load5_type;
  _pressure_load5_type pressure_load5;

   typedef int16_t _pressure_load6_type;
  _pressure_load6_type pressure_load6;

   typedef int16_t _pressure_load7_type;
  _pressure_load7_type pressure_load7;




  typedef boost::shared_ptr< ::default_pkg::lift_pressure_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::default_pkg::lift_pressure_<ContainerAllocator> const> ConstPtr;

}; // struct lift_pressure_

typedef ::default_pkg::lift_pressure_<std::allocator<void> > lift_pressure;

typedef boost::shared_ptr< ::default_pkg::lift_pressure > lift_pressurePtr;
typedef boost::shared_ptr< ::default_pkg::lift_pressure const> lift_pressureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::default_pkg::lift_pressure_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::default_pkg::lift_pressure_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace default_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'default_pkg': ['/home/labh/plattform-ros/src/default_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::lift_pressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::lift_pressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::lift_pressure_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::lift_pressure_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::lift_pressure_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::lift_pressure_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::default_pkg::lift_pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8db6d3508127a0e3968bf2cc3e4314f";
  }

  static const char* value(const ::default_pkg::lift_pressure_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8db6d3508127a0eULL;
  static const uint64_t static_value2 = 0x3968bf2cc3e4314fULL;
};

template<class ContainerAllocator>
struct DataType< ::default_pkg::lift_pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "default_pkg/lift_pressure";
  }

  static const char* value(const ::default_pkg::lift_pressure_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::default_pkg::lift_pressure_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# lift_pressure\n\
# Pressure measured by the 8 Load-Cells\n\
int16 pressure_load0\n\
int16 pressure_load1\n\
int16 pressure_load2\n\
int16 pressure_load3\n\
int16 pressure_load4\n\
int16 pressure_load5\n\
int16 pressure_load6\n\
int16 pressure_load7\n\
";
  }

  static const char* value(const ::default_pkg::lift_pressure_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::default_pkg::lift_pressure_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pressure_load0);
      stream.next(m.pressure_load1);
      stream.next(m.pressure_load2);
      stream.next(m.pressure_load3);
      stream.next(m.pressure_load4);
      stream.next(m.pressure_load5);
      stream.next(m.pressure_load6);
      stream.next(m.pressure_load7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct lift_pressure_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::default_pkg::lift_pressure_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::default_pkg::lift_pressure_<ContainerAllocator>& v)
  {
    s << indent << "pressure_load0: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pressure_load0);
    s << indent << "pressure_load1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pressure_load1);
    s << indent << "pressure_load2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pressure_load2);
    s << indent << "pressure_load3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pressure_load3);
    s << indent << "pressure_load4: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pressure_load4);
    s << indent << "pressure_load5: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pressure_load5);
    s << indent << "pressure_load6: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pressure_load6);
    s << indent << "pressure_load7: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pressure_load7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFAULT_PKG_MESSAGE_LIFT_PRESSURE_H
