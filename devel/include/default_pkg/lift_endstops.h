// Generated by gencpp from file default_pkg/lift_endstops.msg
// DO NOT EDIT!


#ifndef DEFAULT_PKG_MESSAGE_LIFT_ENDSTOPS_H
#define DEFAULT_PKG_MESSAGE_LIFT_ENDSTOPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace default_pkg
{
template <class ContainerAllocator>
struct lift_endstops_
{
  typedef lift_endstops_<ContainerAllocator> Type;

  lift_endstops_()
    : lift_end0(0)
    , lift_end1(0)
    , lift_end2(0)
    , lift_end3(0)
    , lift_end4(0)
    , lift_end5(0)
    , lift_end6(0)
    , lift_end7(0)  {
    }
  lift_endstops_(const ContainerAllocator& _alloc)
    : lift_end0(0)
    , lift_end1(0)
    , lift_end2(0)
    , lift_end3(0)
    , lift_end4(0)
    , lift_end5(0)
    , lift_end6(0)
    , lift_end7(0)  {
  (void)_alloc;
    }



   typedef int8_t _lift_end0_type;
  _lift_end0_type lift_end0;

   typedef int8_t _lift_end1_type;
  _lift_end1_type lift_end1;

   typedef int8_t _lift_end2_type;
  _lift_end2_type lift_end2;

   typedef int8_t _lift_end3_type;
  _lift_end3_type lift_end3;

   typedef int8_t _lift_end4_type;
  _lift_end4_type lift_end4;

   typedef int8_t _lift_end5_type;
  _lift_end5_type lift_end5;

   typedef int8_t _lift_end6_type;
  _lift_end6_type lift_end6;

   typedef int8_t _lift_end7_type;
  _lift_end7_type lift_end7;




  typedef boost::shared_ptr< ::default_pkg::lift_endstops_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::default_pkg::lift_endstops_<ContainerAllocator> const> ConstPtr;

}; // struct lift_endstops_

typedef ::default_pkg::lift_endstops_<std::allocator<void> > lift_endstops;

typedef boost::shared_ptr< ::default_pkg::lift_endstops > lift_endstopsPtr;
typedef boost::shared_ptr< ::default_pkg::lift_endstops const> lift_endstopsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::default_pkg::lift_endstops_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::default_pkg::lift_endstops_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace default_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'default_pkg': ['/home/labh/plattform-ros/src/default_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::lift_endstops_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::lift_endstops_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::lift_endstops_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::lift_endstops_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::lift_endstops_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::lift_endstops_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::default_pkg::lift_endstops_<ContainerAllocator> >
{
  static const char* value()
  {
    return "930e42309aa3f8c5743576e13be17207";
  }

  static const char* value(const ::default_pkg::lift_endstops_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x930e42309aa3f8c5ULL;
  static const uint64_t static_value2 = 0x743576e13be17207ULL;
};

template<class ContainerAllocator>
struct DataType< ::default_pkg::lift_endstops_<ContainerAllocator> >
{
  static const char* value()
  {
    return "default_pkg/lift_endstops";
  }

  static const char* value(const ::default_pkg::lift_endstops_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::default_pkg::lift_endstops_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# lift_endstops\n\
# Status of the 8 Endstops at the top of the lifts\n\
# 0 = lift is up ; 1 = lift is not up\n\
int8 lift_end0\n\
int8 lift_end1\n\
int8 lift_end2\n\
int8 lift_end3\n\
int8 lift_end4\n\
int8 lift_end5\n\
int8 lift_end6\n\
int8 lift_end7\n\
";
  }

  static const char* value(const ::default_pkg::lift_endstops_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::default_pkg::lift_endstops_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lift_end0);
      stream.next(m.lift_end1);
      stream.next(m.lift_end2);
      stream.next(m.lift_end3);
      stream.next(m.lift_end4);
      stream.next(m.lift_end5);
      stream.next(m.lift_end6);
      stream.next(m.lift_end7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct lift_endstops_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::default_pkg::lift_endstops_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::default_pkg::lift_endstops_<ContainerAllocator>& v)
  {
    s << indent << "lift_end0: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_end0);
    s << indent << "lift_end1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_end1);
    s << indent << "lift_end2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_end2);
    s << indent << "lift_end3: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_end3);
    s << indent << "lift_end4: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_end4);
    s << indent << "lift_end5: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_end5);
    s << indent << "lift_end6: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_end6);
    s << indent << "lift_end7: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lift_end7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFAULT_PKG_MESSAGE_LIFT_ENDSTOPS_H
