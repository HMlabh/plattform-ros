// Generated by gencpp from file default_pkg/DummyTalk.msg
// DO NOT EDIT!


#ifndef DEFAULT_PKG_MESSAGE_DUMMYTALK_H
#define DEFAULT_PKG_MESSAGE_DUMMYTALK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace default_pkg
{
template <class ContainerAllocator>
struct DummyTalk_
{
  typedef DummyTalk_<ContainerAllocator> Type;

  DummyTalk_()
    : lcdA()
    , lcdB()
    , lcdC()
    , lcdD()  {
    }
  DummyTalk_(const ContainerAllocator& _alloc)
    : lcdA(_alloc)
    , lcdB(_alloc)
    , lcdC(_alloc)
    , lcdD(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lcdA_type;
  _lcdA_type lcdA;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lcdB_type;
  _lcdB_type lcdB;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lcdC_type;
  _lcdC_type lcdC;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _lcdD_type;
  _lcdD_type lcdD;


    enum { Counter = 7 };
 

  typedef boost::shared_ptr< ::default_pkg::DummyTalk_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::default_pkg::DummyTalk_<ContainerAllocator> const> ConstPtr;

}; // struct DummyTalk_

typedef ::default_pkg::DummyTalk_<std::allocator<void> > DummyTalk;

typedef boost::shared_ptr< ::default_pkg::DummyTalk > DummyTalkPtr;
typedef boost::shared_ptr< ::default_pkg::DummyTalk const> DummyTalkConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::default_pkg::DummyTalk_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::default_pkg::DummyTalk_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace default_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'default_pkg': ['/home/labh/plattform-ros/src/default_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::DummyTalk_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::default_pkg::DummyTalk_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::DummyTalk_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::default_pkg::DummyTalk_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::DummyTalk_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::default_pkg::DummyTalk_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::default_pkg::DummyTalk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24ea992dce1350a60ad5ebcd54710290";
  }

  static const char* value(const ::default_pkg::DummyTalk_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24ea992dce1350a6ULL;
  static const uint64_t static_value2 = 0x0ad5ebcd54710290ULL;
};

template<class ContainerAllocator>
struct DataType< ::default_pkg::DummyTalk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "default_pkg/DummyTalk";
  }

  static const char* value(const ::default_pkg::DummyTalk_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::default_pkg::DummyTalk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 Counter = 7\n\
string lcdA\n\
string lcdB\n\
string lcdC\n\
string lcdD\n\
";
  }

  static const char* value(const ::default_pkg::DummyTalk_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::default_pkg::DummyTalk_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lcdA);
      stream.next(m.lcdB);
      stream.next(m.lcdC);
      stream.next(m.lcdD);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct DummyTalk_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::default_pkg::DummyTalk_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::default_pkg::DummyTalk_<ContainerAllocator>& v)
  {
    s << indent << "lcdA: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lcdA);
    s << indent << "lcdB: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lcdB);
    s << indent << "lcdC: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lcdC);
    s << indent << "lcdD: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.lcdD);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEFAULT_PKG_MESSAGE_DUMMYTALK_H
